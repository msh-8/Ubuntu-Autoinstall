#cloud-config
autoinstall:
  version: 1
  early-commands:
    - |
      cat << EOF >> /test.sh
      #!/bin/bash
      #diskname=\$(lsblk -o NAME | grep -E 'sda$|vda$')
      if [ -e "/sys/firmware/efi"  ]; then
        python3 /grub.py
      else
        python3 /bios.py
      fi
      ip=\$(grep  -E '.*\/[0-9]{1,2}' /autoinstall.yaml  | awk -F'-' '{print\$2}')
      gateway=\$(grep -E 'gateway4:.[0-9]{1,3}\.' /autoinstall.yaml | awk '{print\$2}')
      for interface in \$(ls /sys/class/net); do
        #ip link set \${interface} up
        if [ \${interface} = 'lo' ]; then
          continue
        elif [ \$(cat /sys/class/net/\${interface}/operstate) = 'up' ]; then
          ip addr flush dev \${interface}
          ip addr add \${ip} dev \${interface}
          ping -c2 \$(echo \${gateway}) &>/dev/null
          status_code=\$?
          if [ \${status_code} -eq 0 ]; then
            nicname=\${interface}
            ip addr flush dev \${interface}
            break
          else
            ip addr flush dev \${interface}
            nicname=en1
          fi
      	fi
      done 
      sed -i "s/nicname/\$nicname/" /autoinstall.yaml
      EOF
    - |  
      cat << EOF > /grub.py
      #!/usr/bin/python3
      import yaml
      import subprocess
      diskname = subprocess.getoutput("lsblk -o NAME | grep -E 'sda$|vda$'")
      disk_dic = {'id': diskname, 'type': 'disk', 'wipe': 'superblock', 'ptable': 'gpt', 'path': str('/dev/'+diskname), 'grub_device': False}
      part1_dic = {'id': str(diskname+'1'), 'type': 'partition', 'size': '800M', 'device': diskname, 'flag': 'boot', 'wipe': 'superblock', 'grub_device': True, 'number': 1}
      fmt1_dic = {'id': str(diskname+'1-format'), 'type': 'format', 'fstype': 'fat32', 'label': 'BOOTEFI', 'volume': str(diskname+'1')}
      part2_dic = {'id': str(diskname+'2'), 'type': 'partition', 'size': '2G', 'device': diskname, 'name': 'boot-partition', 'wipe': 'superblock', 'number': 2}
      fmt2_dic = {'id': str(diskname+'2-format'), 'type': 'format', 'fstype': 'ext4', 'label': 'BOOT', 'volume': str(diskname+'2')}
      {% if Disk_CFG.Deploy == true -%}
      {% if Disk_CFG.Partition_Customization.PV0_Size == '-1' or Disk_CFG.Partition_Customization.PV0_Size == -1 -%}
      part3_dic = {'id': str(diskname+'3'), 'type': 'partition', 'size': -1, 'device': diskname, 'name': 'root-partition', 'wipe': 'superblock', 'number': 3}
      {% else -%}
      part3_dic = {'id': str(diskname+'3'), 'type': 'partition', 'size': '{{ Disk_CFG.Partition_Customization.PV0_Size  }}', 'device': diskname, 'name': 'vg0-partition', 'wipe': 'superblock', 'number': 3}
      {% endif -%}
      volgp_dic = {'id': 'vg0', 'devices': [str(diskname+'3')], 'type': 'lvm_volgroup', 'name': 'vg0'}
      {% set disk_cfg_lst_j2 = ['disk_dic', 'part1_dic', 'fmt1_dic', 'part2_dic', 'fmt2_dic', 'part3_dic', 'volgp_dic'] -%}
      {% for lv in Disk_CFG.LV_Customization -%}
      lvm_part_{{ lv.Name }}_dic = {'id': '{{ lv.Name }}', 'type': 'lvm_partition', 'volgroup': 'vg0', 'name': '{{ lv.Name }}', 'size': '{{ lv.Size }}', 'wipe': 'superblock'}
      {{ disk_cfg_lst_j2.append('lvm_part_'+lv.Name+'_dic') -}}
      {% endfor -%}
      {% for fmt in Disk_CFG.LV_Customization -%}
      lvm_fmt_{{ fmt.Name }}_dic = {'id': '{{ fmt.Name }}-format', 'type': 'format', 'fstype': 'ext4', 'volume': '{{ fmt.Name }}', 'preserve': False}
      {{ disk_cfg_lst_j2.append('lvm_fmt_'+fmt.Name+'_dic') -}}
      {% endfor -%}
      mnt1_dic = {'id': str(diskname+'1-mount'), 'type': 'mount', 'path': '/boot/efi', 'device': str(diskname+'1-format')}
      mnt2_dic = {'id': str(diskname+'2-mount'), 'type': 'mount', 'path': '/boot', 'device': str(diskname+'2-format')}
      {{ disk_cfg_lst_j2.append('mnt1_dic') -}}
      {{ disk_cfg_lst_j2.append('mnt2_dic') -}}
      {% for mnt in Disk_CFG.LV_Customization -%}
      lvm_mnt_{{ mnt.Name }}_dic = {'id': '{{ mnt.Name }}-mnt', 'type': 'mount', 'path': '{{ mnt.Path }}', 'device': '{{ mnt.Name }}-format'}
      {{ disk_cfg_lst_j2.append('lvm_mnt_'+mnt.Name+'_dic') -}}
      {% endfor -%}
      disk_cfg_lst = {{ disk_cfg_lst_j2 | regex_replace("\'", "") }}
      {% else -%}
      part3_dic = {'id': str(diskname+'3'), 'type': 'partition', 'size': -1, 'device': diskname, 'name': 'root-partition', 'wipe': 'superblock', 'number': 3}
      volgp_dic = {'id': 'vg0', 'devices': [str(diskname+'3')], 'type': 'lvm_volgroup', 'name': 'vg0'}
      lvm_part_dic = {'id': 'lv0', 'type': 'lvm_partition', 'volgroup': 'vg0', 'name': 'lv0', 'size': '10G', 'wipe': 'superblock'}
      lv_fmt_dic = {'id': 'lv0-format', 'type': 'format', 'fstype': 'ext4', 'volume': 'lv0', 'preserve': False}
      mnt1_dic = {'id': str(diskname+'1-mount'), 'type': 'mount', 'path': '/boot/efi', 'device': str(diskname+'1-format')}
      mnt2_dic = {'id': str(diskname+'2-mount'), 'type': 'mount', 'path': '/boot', 'device': str(diskname+'2-format')}
      mnt3_dic = {'id': 'lv0-mount', 'type': 'mount', 'path': '/', 'device': 'lv0-format'}
      disk_cfg_lst = [disk_dic, part1_dic, fmt1_dic, part2_dic, fmt2_dic, part3_dic, volgp_dic, lvm_part_dic, lv_fmt_dic, mnt1_dic, mnt2_dic, mnt3_dic]
      {% endif -%}
      with open('/autoinstall.yaml', 'r') as reader:
         autoinstall = yaml.safe_load(reader)
      autoinstall['storage'].clear()
      autoinstall['storage'].update({'config' : disk_cfg_lst})
      with open('/autoinstall.yaml', 'w') as writer:
        yaml.dump(autoinstall, writer)
      EOF
    - |  
      cat << EOF > /bios.py
      #!/usr/bin/python3
      import yaml
      import subprocess
      diskname = subprocess.getoutput("lsblk -o NAME | grep -E 'sda$|vda$'")
      disk_dic = {'id': diskname, 'type': 'disk', 'wipe': 'superblock', 'ptable': 'gpt', 'path': str('/dev/'+diskname), 'grub_device': True}
      part1_dic = {'id': str(diskname+'1'), 'type': 'partition', 'size': '1M', 'device': diskname, 'flag': 'bios_grub', 'wipe': 'superblock', 'number': 1}
      part2_dic = {'id': str(diskname+'2'), 'type': 'partition', 'size': '2G', 'device': diskname, 'name': 'boot-partition', 'wipe': 'superblock', 'number': 2}
      fmt2_dic = {'id': str(diskname+'2-format'), 'type': 'format', 'fstype': 'ext4', 'label': 'BOOT', 'volume': str(diskname+'2')}
      {% if Disk_CFG.Deploy == true -%}
      {% if Disk_CFG.Partition_Customization.PV0_Size == '-1' or Disk_CFG.Partition_Customization.PV0_Size == -1 -%}
      part3_dic = {'id': str(diskname+'3'), 'type': 'partition', 'size': -1, 'device': diskname, 'name': 'root-partition', 'wipe': 'superblock', 'number': 3}
      {% else -%}
      part3_dic = {'id': str(diskname+'3'), 'type': 'partition', 'size': '{{ Disk_CFG.Partition_Customization.PV0_Size }}', 'device': diskname, 'name': 'root-partition', 'wipe': 'superblock', 'number': 3}
      {% endif -%}
      volgp_dic = {'id': 'vg0', 'devices': [str(diskname+'3')], 'type': 'lvm_volgroup', 'name': 'vg0'}
      {% set disk_cfg_lst_j2 = ['disk_dic', 'part1_dic', 'part2_dic', 'fmt2_dic', 'part3_dic', 'volgp_dic'] -%}
      {% for lv in Disk_CFG.LV_Customization -%}
      lvm_part_{{ lv.Name }}_dic = {'id': '{{ lv.Name }}', 'type': 'lvm_partition', 'volgroup': 'vg0', 'name': '{{ lv.Name }}', 'size': '{{ lv.Size }}', 'wipe': 'superblock'}
      {{ disk_cfg_lst_j2.append('lvm_part_'+lv.Name+'_dic') -}}
      {% endfor -%}
      {% for fmt in Disk_CFG.LV_Customization -%}
      lvm_fmt_{{ fmt.Name }}_dic = {'id': '{{ fmt.Name }}-format', 'type': 'format', 'fstype': 'ext4', 'volume': '{{ fmt.Name }}', 'preserve': False}
      {{ disk_cfg_lst_j2.append('lvm_fmt_'+fmt.Name+'_dic') -}}
      {% endfor -%}
      mnt2_dic = {'id': str(diskname+'2-mount'), 'type': 'mount', 'path': '/boot', 'device': str(diskname+'2-format')}
      {{ disk_cfg_lst_j2.append('mnt2_dic') -}}
      {% for mnt in Disk_CFG.LV_Customization -%}
      lvm_mnt_{{ mnt.Name }}_dic = {'id': '{{ mnt.Name }}-mnt', 'type': 'mount', 'path': '{{ mnt.Path }}', 'device': '{{ mnt.Name }}-format'}
      {{ disk_cfg_lst_j2.append('lvm_mnt_'+mnt.Name+'_dic') -}}
      {% endfor -%}
      disk_cfg_lst = {{ disk_cfg_lst_j2 | regex_replace("\'", "") }}
      {% else -%}
      part3_dic = {'id': str(diskname+'3'), 'type': 'partition', 'size': -1, 'device': diskname, 'name': 'root-partition', 'wipe': 'superblock', 'number': 3}
      volgp_dic = {'id': 'vg0', 'devices': [str(diskname+'3')], 'type': 'lvm_volgroup', 'name': 'vg0'}
      lvm_part_dic = {'id': 'lv0', 'type': 'lvm_partition', 'volgroup': 'vg0', 'name': 'lv0', 'size': '10G', 'wipe': 'superblock'}
      lv_fmt_dic = {'id': 'lv0-format', 'type': 'format', 'fstype': 'ext4', 'volume': 'lv0', 'preserve': False}
      mnt2_dic = {'id': str(diskname+'2-mount'), 'type': 'mount', 'path': '/boot', 'device': str(diskname+'2-format')}
      mnt3_dic = {'id': 'lv0-mount', 'type': 'mount', 'path': '/', 'device': 'lv0-format'}
      disk_cfg_lst = [disk_dic, part1_dic, part2_dic, fmt2_dic, part3_dic, volgp_dic, lvm_part_dic, lv_fmt_dic, mnt2_dic, mnt3_dic]
      {% endif -%} 
      with open('/autoinstall.yaml', 'r') as reader:
        autoinstall = yaml.safe_load(reader)
      autoinstall['storage'].clear()
      autoinstall['storage'].update({'config' : disk_cfg_lst})
      with open('/autoinstall.yaml', 'w') as writer:
        yaml.dump(autoinstall, writer)
      EOF
    - chmod +x /grub.py
    - chmod +x /bios.py
    - chmod +x /test.sh
    - bash /test.sh
  locale: en_US
  keyboard:
    layout: us
    variant: intl
  apt:
    fallback: continue-anyway   # it does not interrupt the autoinstall procidure if there is no any internet connection.
    {% if ( (Apt_CFG.Deploy == true) and 
          (Apt_CFG.Url != None  ) ) -%}
    primary:
      - arches: [amd64, i386]
        #uri: http://us.archive.ubuntu.com/ubuntu
        uri: {{ Apt_CFG.Url }}
    security:
    - arches:
      - amd64
      - i386
      #uri: http://security.ubuntu.com/ubuntu/
      uri: {{ Apt_CFG.Url }}
    - arches:
      - s390x
      - arm64
      - armhf
      - powerpc
      - ppc64el
      - riscv64
      uri: http://ports.ubuntu.com/ubuntu-ports
    {% else -%}
    primary:
      - arches: [amd64, i386]
        #uri: http://us.archive.ubuntu.com/ubuntu
        uri: https://ubuntu.shatel.ir/ubuntu/
    security:
    - arches:
      - amd64
      - i386
      #uri: http://security.ubuntu.com/ubuntu/
      uri: https://ubuntu.shatel.ir/ubuntu/
    - arches:
      - s390x
      - arm64
      - armhf
      - powerpc
      - ppc64el
      - riscv64
      uri: http://ports.ubuntu.com/ubuntu-ports
    {% endif -%}
#
  network:
    network:
      version: 2
      ethernets:
        nicname:
          addresses: [{{ item.Network.Ip }}]
          gateway4: {{ item.Network.Gateway }}
          nameservers:
            addresses:
            {% if item.Network.DNS  | type_debug == 'list' -%}
            {% for nsaddr in item.Network.DNS -%}
              - {{ nsaddr }}
            {% endfor -%}
            {% else -%}
             - {{ item.Network.DNS }}
            {% endif -%}
#
  ssh:
    install-server: yes
  {% if ( (Package_CFG.Deploy == true) and 
        (Package_CFG.Package_List | length > 0) ) -%}
  packages:
  {% for pkgs in Package_CFG.Package_List %}
  - {{ pkgs }}
  {% endfor -%}
  {% endif -%}
  storage:
     config:
      - {ptable: gpt, path: /dev/sda, preserve: false, name: '', id: disk-sda, type: disk, grub_device: false}
      - {device: disk-sda, size: 800M, wipe: superblock, flag: boot, number: 1, preserve: false, grub_device: true, id: partition-0, type: partition}
      - {fstype: fat32, volume: partition-0, preserve: false, id: format-0, type: format}
      - {device: disk-sda, size: 2G, wipe: superblock, number: 2, preserve: false, offset: 801112064, id: partition-1, type: partition}
      - {fstype: ext4, volume: partition-1, preserve: false, id: format-1, type: format}
      - {device: disk-sda, size: -1, wipe: superblock, number: 3, preserve: false, id: partition-2, type: partition}
      - {name: ubuntu-vg, devices: [partition-2], preserve: false, id: lvm_volgroup-0, type: lvm_volgroup}
      - {name: ubuntu-lv, volgroup: lvm_volgroup-0, size: 10G, wipe: superblock, preserve: false, path: /dev/ubuntu-vg/ubuntu-lv, id: lvm_partition-0, type: lvm_partition}
      - {fstype: ext4, volume: lvm_partition-0, preserve: false, id: format-2, type: format}
      - {path: /, device: format-2, id: mount-2, type: mount} 
      - {path: /boot, device: format-1, id: mount-1, type: mount} 
      - {path: /boot/efi, device: format-0, id: mount-0, type: mount}
  {% if ( (Users_CFG.Deploy == true) and
     (Users_CFG.Users | length > 0) ) -%}
  late-commands:
  {% for sudoer in Users_CFG.Users -%}
  {% if sudoer.Sudo == true -%}
  - echo '{{ sudoer.Username }} ALL=(ALL) NOPASSWD:ALL' > /target/etc/sudoers.d/{{ sudoer.Username }} # Allow user to run sudo without password
  {% endif -%}
  {% endfor -%}
  user-data:
    disable_root: false
    hostname: "{{ item.OS.Host_Name }}"  
    users:
      {% for user in Users_CFG.Users -%}
      - name: {{ user.Username }}
        passwd: {{ user.Password }}
        shell: /bin/bash 
        lock_passwd: false 
      {% endfor -%}
  {% endif -%} 
